pool:
  vmImage: 'windows-2022'

trigger:
  batch: true
  branches:
    include:
    - '*'
  tags:
    include:
    - '*'

pr:
  autoCancel: true
  drafts: true
  branches:
    include:
    - '*'

variables:
  acsTimestampServer: http://timestamp.acs.microsoft.com
  solution: $(Build.SourcesDirectory)/TranslucentTB.sln

${{ if not(startsWith('refs/tags/', variables['Build.SourceBranch'])) }}:
  variables:
    VCPKG_BINARY_SOURCES: 'clear;nuget,https://pkgs.dev.azure.com/TranslucentTB/_packaging/VcpkgArchives/nuget/v3/index.json,readwrite'

  strategy:
    matrix:
      'ARM64 Debug':
        configuration: Debug
        platform: ARM64
      'ARM64 Release':
        configuration: Release
        platform: ARM64
      'x64 Debug':
        configuration: Debug
        platform: x64
      'x64 Release':
        configuration: Release
        platform: x64
${{ else }}:
  variables:
  - group: Azure Code Signing

  variables:
    configuration: Release
    packageSigningArgs: /p:AppxPackageSigningTimestampServerUrl="$(acsTimestampServer)" /p:AppxPackageSigningTimestampDigestAlgorithm=SHA256 /p:AzureCodeSigningEnabled=true /p:AzureCodeSigningEndpoint="$(acsEndpoint)" /p:AzureCodeSigningAccountName="$(acsAccountName)" /p:AzureCodeSigningCertificateProfileName="$(acsProfileName)"

steps:
- checkout: self
  fetchTags: true
- powershell: .\update-version.ps1
  displayName: Update version info
- powershell: .\get-build-type.ps1
  displayName: Determine build type
- powershell: .\update-manifest.ps1
  displayName: Update app manifest
- script: git pull
  displayName: 'Update vcpkg ports'
  workingDirectory: C:\vcpkg
- script: .\bootstrap-vcpkg.bat
  displayName: 'Bootstrap vcpkg'
  workingDirectory: C:\vcpkg
- script: vcpkg integrate install
  displayName: 'Integrate vcpkg'
- task: NuGetAuthenticate@1
  displayName: 'Authenticate NuGet'
- task: NuGetCommand@2
  displayName: 'Restore NuGet packages'
  inputs:
    restoreSolution: $(solution)
- ${{ if ne(variables['System.PullRequest.IsFork'], 'True') }}:
  - task: DownloadSecureFile@1
    name: acsMetadata
    displayName: 'Download Azure Code Signing metadata'
    inputs:
      secureFile: metadata.json
  - task: AzureCLI@2
    displayName: Get Azure Credentials
    inputs:
      azureSubscription: Azure Code Signing
      scriptType: pscore
      scriptLocation: inlineScript
      addSpnToEnvironment: true
      inlineScript: |
        echo "##vso[task.setvariable variable=azure_tenant_id;issecret=true]$env:tenantId"
        echo "##vso[task.setvariable variable=azure_service_principal_id;issecret=true]$env:servicePrincipalId"
        echo "##vso[task.setvariable variable=azure_federated_token;issecret=true]$env:idToken"
  - script: az login --service-principal -u "$(azure_service_principal_id)" --tenant "$(azure_tenant_id)" --allow-no-subscriptions --federated-token "$(azure_federated_token)"
    displayName: Authenticate to Azure
- task: VSBuild@1
  displayName: 'Build solution'
  inputs:
    configuration: $(configuration)
    ${{ if startsWith('refs/tags/', variables['Build.SourceBranch']) }}:
      solution: $(Build.SourcesDirectory)/AppPackage/AppPackage.wapproj
    ${{ else }}:
      solution: $(solution)
      platform: $(platform)
    ${{ if ne(variables['System.PullRequest.IsFork'], 'True') }}:
      msbuildArgs: $[packageSigningArgs] /p:CertificateTimestampServer="$(acsTimestampServer)" /p:AcsMetadata="$(acsMetadata.secureFilePath)" /p:SignToolDigestAlgorithm=sha256 /p:BuildType=$(build_type)
    ${{ else }}:
      msbuildArgs: /p:BuildType=$(build_type)
- ${{ if ne(variables['System.PullRequest.IsFork'], 'True') }}:
  - script: az account clear
    displayName: Logout from Azure
    condition: always()
- ${{ if startsWith('refs/tags/', variables['Build.SourceBranch']) }}:
  # TODO: upload msixupload to the store (or artifacts), zip up portable release and create GH release draft.
- ${{ else }}:
  - task: VSTest@2
    displayName: 'Run unit tests'
    condition: and(succeededOrFailed(), eq(variables['platform'], 'x64'))
    inputs:
      testAssemblyVer2: $(platform)\$(configuration)\Tests.exe
      runInParallel: true
      platform: $(platform)
      configuration: $(configuration)
      testRunTitle: '$(platform) $(configuration)'
  - publish: $(Build.SourcesDirectory)\AppPackage\bin\$(platform)\$(configuration)
    artifact: 'Portable $(platform) $(configuration)'
    displayName: 'Upload portable build'
  - publish: $(Build.SourcesDirectory)\AppPackage\AppPackages
    artifact: 'MSIX $(platform) $(configuration)'
    displayName: 'Upload MSIX package'
