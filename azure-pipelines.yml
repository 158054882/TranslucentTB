pool:
  vmImage: 'windows-2022'

variables:
  solution: $(Build.SourcesDirectory)/TranslucentTB.sln
  VCPKG_BINARY_SOURCES: 'clear;nuget,https://pkgs.dev.azure.com/TranslucentTB/_packaging/VcpkgArchives/nuget/v3/index.json,readwrite'

strategy:
  matrix:
    'ARM64 Debug':
      configuration: Debug
      platform: ARM64
    'ARM64 Release':
      configuration: Release
      platform: ARM64
    'x64 Debug':
      configuration: Debug
      platform: x64
    'x64 Release':
      configuration: Release
      platform: x64

steps:
- checkout: self
  fetchTags: true
- powershell: .\update-version.ps1
  displayName: Update version info
- script: git pull
  displayName: 'Update vcpkg ports'
  workingDirectory: C:\vcpkg
- script: .\bootstrap-vcpkg.bat
  displayName: 'Bootstrap vcpkg'
  workingDirectory: C:\vcpkg
- script: vcpkg integrate install
  displayName: 'Integrate vcpkg'
- task: NuGetAuthenticate@1
  displayName: 'Authenticate NuGet'
- task: NuGetCommand@2
  displayName: 'Restore NuGet packages'
  inputs:
    restoreSolution: $(solution)
- ${{ if ne(variables['Build.Reason'], 'PullRequest') }}:
  - task: DownloadSecureFile@1
    name: acsMetadata
    displayName: 'Download Azure Code Signing metadata'
    inputs:
      secureFile: metadata.json
- task: VSBuild@1
  displayName: 'Build solution'
  inputs:
    solution: $(solution)
    platform: $(platform)
    configuration: $(configuration)
    ${{ if ne(variables['Build.Reason'], 'PullRequest') }}:
      msbuildArgs: /p:CertificateTimestampServer="http://timestamp.acs.microsoft.com" /p:AcsMetadata="$(acsMetadata.secureFilePath)"
- publish: $(Build.SourcesDirectory)\AppPackage\bin\$(platform)\$(configuration)
  artifact: 'Portable $(platform) $(configuration)'
  displayName: 'Upload portable build'
- publish: $(Build.SourcesDirectory)\AppPackage\AppPackages
  artifact: 'MSIX $(platform) $(configuration)'
  displayName: 'Upload MSIX package'
- task: VSTest@2
  displayName: 'Run unit tests'
  condition: and(succeededOrFailed(), eq(variables['platform'], 'x64'))
  inputs:
    testAssemblyVer2: $(platform)\$(configuration)\Tests.exe
    runInParallel: true
    platform: $(platform)
    configuration: $(configuration)
    testRunTitle: '$(platform) $(configuration)'
